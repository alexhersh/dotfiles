#!/usr/bin/ruby

# Graphically display battery state.
#
# Plugged in and charging:
# â—‰ â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–‘â–‘â–‘â–‘ Orange
#
# Plugged in not charging:
# â—¯ â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–‘â–‘â–‘â–‘ Orange
#
# Plugged in and full:
# â—¯ â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ Green
#
# Not plugged in:
# â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ Green 70 or more
# â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–‘â–‘â–‘â–‘ Green [35-70)
# â–ˆâ–ˆâ–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘ Green 35 or less


battery = { }
data    = IO.popen("ioreg -rc AppleSmartBattery").readlines()
data.select { |l| l =~ /=/ }.map{ |l| l.strip.gsub("\"", "") }.each do |l|
  key, value   = l.split " = "
  battery[key] = value
end

def color_bar( charge, bar )
  if charge >= 70
    cc = 32
  elsif charge >= 35
    cc = 33
  else
    cc = 31
  end
  "%{[#{cc}m%}#{bar}%{[00m%}"
end

# construct a charge bar of length n
def charge_bar( charge, n )
  charge_bar = ""
  n.times do |i|
    if (charge / 100 * n).round >= i
      charge_bar += "â–ˆ"
    else
      charge_bar += "â–‘"
    end
  end
  return color_bar(charge, charge_bar)
end

# Symbol to display when charging or not while plugged in.
if battery['IsCharging'] == "Yes"
  charge_symbol = "â—‰ "
else
  charge_symbol = "â—¯ "
end

# Current charge of computer (%)
charge = 100 * (battery['CurrentCapacity'].to_f / battery['MaxCapacity'].to_f)

width = 10
if battery['ExternalConnected'] == "Yes"
  print "#{charge_symbol}#{charge_bar(charge, width)}"
else
  print charge_bar(charge, width)
end